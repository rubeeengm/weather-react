{"version":3,"sources":["components/Titles.js","components/Weather.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","Weather","city","country","temperature","humidity","description","error","Form","onSubmit","getWeather","type","name","placeholder","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","Math","trunc","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e760d8f8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = props => {\n    return(\n        <div>\n            <h1 className=\"title_container__title\">Weather finder</h1>\n            <p className=\"title_container__subtitle\">Find out temperature, conditions and more...</p>\n        </div>\n    );\n}\n\nexport default Titles;","import React from \"react\";\n\nconst Weather = props => {\n    return (\n        <div className = \"weather__info\">\n            { props.city && props.country && <p className=\"weather__key\">Location:\n                <span className=\"weather__value\"> { props.city }, { props.country }</span>\n            </p> }\n\n            { props.temperature && <p className=\"weather__key\">Temperature:\n                <span className=\"weather__value\"> { props.temperature } Â°C</span>\n            </p> }\n\n            { props.humidity && <p className=\"weather__key\">Humidity:\n                <span className=\"weather__value\"> { props.humidity }</span>\n            </p> }\n\n            { props.description && <p className=\"weather__key\">Condition:\n                <span className=\"weather__value\"> { props.description }</span>\n            </p> }\n\n            { props.error && <p className=\"weather__key\">\n                <span className=\"weather__error\"> { props.error }</span>\n            </p> }\n        </div>\n    );\n}\n\nexport default Weather;","import React from \"react\";\n\nconst Form = props => {\n    return (\n        <form onSubmit = { props.getWeather }>\n            <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n            <button>Get Weather</button>\n        </form>\n    );\n}\n\nexport default Form;","import React from \"react\";\n\nimport Titles from \"./components/Titles\"\nimport Weather from \"./components/Weather\"\nimport Form from \"./components/Form\"\n\nconst API_KEY = \"99a860035dea1a92a7dec475968d9ab0\";\n\nclass App extends React.Component {\n\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n\n    getWeather = async(e) => {\n        e.preventDefault();\n        \n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n        const data = await api_call.json();\n\n        if (city && country){\n            this.setState({\n                temperature: Math.trunc(data.main.temp - 273.15),\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\"\n            });\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"Please enter the value\"\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-5 title-container\">\n                                    <Titles/>\n                                </div>\n\n                                <div className=\"col-xs-7 form-container\">\n                                    <Form getWeather = { this.getWeather }/>\n                                    <Weather\n                                        temperature  = { this.state.temperature }\n                                        city         = { this.state.city }\n                                        country      = { this.state.country }\n                                        humidity     = { this.state.humidity }\n                                        description  = { this.state.description }\n                                        error        = { this.state.error }\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}